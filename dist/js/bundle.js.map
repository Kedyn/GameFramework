{"version":3,"sources":["js/node_modules/browser-pack/_prelude.js","js/src/framework/Drawing.ts","js/src/framework/Game.ts","js/src/framework/GameObject.ts","js/src/framework/GameScene.ts","js/src/framework/GameSceneManager.ts","js/src/framework/InputHandler.ts","js/src/framework/KeyCode.ts","js/src/framework/Vector2D.ts","js/src/main.ts","js/src/test/TestScene.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","GameObject_1","Drawing","RectangleDrawing","_super","object","color","fill","canvas_context","this","__extends","prototype","draw","fillStyle","fillRect","position","x","y","width","height","strokeStyle","lineWidth","strokeRect","LineDrawing","start_position","end_position","PolyGameObject","moveTo","lineTo","stroke","CircleDrawing","start_angle","end_angle","clockwise","beginPath","arc","radius","TextDrawing","font_size","font_name","text","center","save","font","measureText","RectangularGameObject","restore","textAlign","fillText","strokeText","ImageDrawing","image","drawImage","./GameObject","2","InputHandler_1","GameSceneManager_1","SECOND","Game","game_id","canvas","_this","animate","time","Date","elapse","getTime","last_time","interval","frame_rate","scene_manager","update","render","requestAnimationFrame","onKeyDown","key","onKeyUp","onMouseMove","pos","onMouseDown","button","onMouseUp","callbacks","frame_counter","input_handler","InputHandler","GameSceneManager","init","frameRate","inputHandler","isKeyDown","mousePos","isMouseButtonDown","pushScene","scene","changeScene","popScene","./GameSceneManager","./InputHandler","3","AnyGameObject","CircularGameObject","initial_point","end_points","unshift","GameObject","drawing","cooInObject","coo","Math","pow","inside","j","xi","yi","xj","yj","intersect","4","GameScene","id","objects","_i","_a","onEnter","onExit","5","scenes","push","splice","console","log","pop","currentScene","6","Vector2D_1","KeyCode_1","keys","mouse_buttons","ev","preventDefault","keyCode","pageX","pageY","offsetLeft","offsetTop","mouse_pos","tabIndex","addEventListener","onclick","oncontextmenu","onwheel","focus","KEYCODE","int","parseInt","isNaN","Vector2D","./KeyCode","./Vector2D","7","8","isEqual","vector","sqrt","copy","add","subtract","multiply","scalar","divide","normalize","9","Game_1","TestScene_1","window","onload","document","getElementById","game","TestScene","GameScene_1","Drawing_1","getContext","bg_rect","bg","title","../framework/Drawing","../framework/GameObject","../framework/GameScene","../framework/Vector2D"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/*\r\n Dependencies:\r\n */\r\nimport {AnyGameObject, RectangularGameObject, PolyGameObject, CircularGameObject} from \"./GameObject\";\r\nimport {Vector2D} from \"./Vector2D\";\r\n\r\nabstract class Drawing {\r\n    public object: AnyGameObject;\r\n\r\n    public constructor() {}\r\n\r\n    abstract draw(): void;\r\n}\r\n\r\nclass RectangleDrawing extends Drawing {\r\n    public constructor(public object: RectangularGameObject, public color: string, public fill: boolean, private canvas_context: CanvasRenderingContext2D) {\r\n        super();\r\n    }\r\n\r\n    draw(): void {\r\n        if (this.fill) {\r\n            this.canvas_context.fillStyle = this.color;\r\n            this.canvas_context.fillRect(this.object.position.x, this.object.position.y, this.object.width, this.object.height);\r\n        }\r\n        else {\r\n            this.canvas_context.strokeStyle = this.color;\r\n            this.canvas_context.lineWidth = 1;\r\n            this.canvas_context.strokeRect(this.object.position.x, this.object.position.y, this.object.width, this.object.height);\r\n        }\r\n    }\r\n}\r\n\r\nclass LineDrawing extends Drawing {\r\n    constructor(public start_position: Vector2D, public end_position: Vector2D, public color: string, private canvas_context: CanvasRenderingContext2D) {\r\n        super();\r\n        this.object = new PolyGameObject(start_position, [end_position]);\r\n    }\r\n\r\n    draw(): void {\r\n        this.canvas_context.strokeStyle = this.color;\r\n        this.canvas_context.moveTo(this.start_position.x, this.start_position.y);\r\n        this.canvas_context.lineTo(this.end_position.x,this.end_position.y);\r\n        this.canvas_context.lineWidth = 1;\r\n        this.canvas_context.stroke();\r\n    }\r\n}\r\n\r\nclass CircleDrawing extends Drawing {\r\n    constructor(public object: CircularGameObject, public color: string, public start_angle: number, public end_angle: number, public clockwise: boolean, public fill: boolean, private canvas_context: CanvasRenderingContext2D) {\r\n        super();\r\n    }\r\n\r\n    draw(): void {\r\n        this.canvas_context.beginPath();\r\n        this.canvas_context.arc(this.object.position.x, this.object.position.y, this.object.radius, this.start_angle, this.end_angle, this.clockwise);\r\n        if (this.fill) {\r\n            this.canvas_context.fillStyle = this.color;\r\n            this.canvas_context.fill();\r\n        }\r\n        else {\r\n            this.canvas_context.strokeStyle = this.color;\r\n            this.canvas_context.lineWidth = 1;\r\n            this.canvas_context.stroke();\r\n        }\r\n    }\r\n}\r\n\r\nclass TextDrawing extends Drawing {\r\n    constructor(position: Vector2D, public font_size: number, public font_name: string, public color: string, public text: string, public center: boolean, public fill: boolean, private canvas_context: CanvasRenderingContext2D) {\r\n        super();\r\n        canvas_context.save();\r\n        canvas_context.font = font_size + \"px \" + font_name;\r\n        let width = canvas_context.measureText(text).width;\r\n        this.object = new RectangularGameObject(position,width,font_size);\r\n        canvas_context.restore();\r\n    }\r\n\r\n    draw(): void {\r\n        this.canvas_context.font = this.font_size + \"px \" + this.font_name;\r\n        this.canvas_context.textAlign = \"left\";\r\n        if (this.center) {\r\n            this.canvas_context.textAlign = \"center\";\r\n        }\r\n        if (this.fill) {\r\n            this.canvas_context.fillStyle = this.color;\r\n            this.canvas_context.fillText(this.text, this.object.position.x, this.object.position.y);\r\n        }\r\n        else {\r\n            this.canvas_context.strokeStyle = this.color;\r\n            this.canvas_context.strokeText(this.text, this.object.position.x, this.object.position.y);\r\n        }\r\n    }\r\n}\r\n\r\nclass ImageDrawing extends Drawing {\r\n    public width: number;\r\n    public height: number;\r\n    constructor(public position: Vector2D, public image: HTMLImageElement, public center: boolean, private canvas_context: CanvasRenderingContext2D, width?: number, height?: number) {\r\n        super();\r\n        if (this.center) {\r\n            position.x -= image.width / 2;\r\n            position.y -= image.height / 2;\r\n        }\r\n        if (width && height) {\r\n            this.width = width;\r\n            this.height = height;\r\n        }\r\n        else {\r\n            this.width = image.width;\r\n            this.height = image.height;\r\n        }\r\n        this.object = new RectangularGameObject(position,width,height);\r\n    }\r\n\r\n    draw(): void {\r\n        this.canvas_context.drawImage(this.image, this.position.x, this.position.y, this.width, this.height);\r\n    }\r\n}\r\n\r\nexport {Drawing, RectangleDrawing, LineDrawing, CircleDrawing, TextDrawing, ImageDrawing};","/*\r\n Dependencies:\r\n */\r\nimport {InputHandler} from \"./InputHandler\";\r\nimport {KEYCODE} from \"./KeyCode\";\r\nimport {Vector2D} from \"./Vector2D\";\r\nimport {GameSceneManager} from \"./GameSceneManager\";\r\nimport {GameScene} from \"./GameScene\";\r\n\r\n/*\r\n Constants\r\n */\r\nconst SECOND: number = 1000; //in milliseconds\r\n\r\nclass Game {\r\n    /*\r\n     * constructor: constructs the game instance\r\n     * @game_id: string, a game ID used for debugging purposes.\r\n     * @canvas: HTMLCanvasElement, the canvas element that you wish your game to be drawn on.\r\n     */\r\n    public constructor(private game_id: string, public canvas: HTMLCanvasElement) {\r\n        let callbacks = {\r\n            \"onKeyDown\": this.onKeyDown,\r\n            \"onKeyUp\": this.onKeyUp,\r\n            \"onMouseMove\": this.onMouseMove,\r\n            \"onMouseDown\": this.onMouseDown,\r\n            \"onMouseUp\": this.onMouseUp\r\n        };\r\n        this.frame_rate = 60;\r\n        let time = new Date();\r\n        this.frame_counter = 0;\r\n        this.last_time = time.getTime();\r\n        this.input_handler = new InputHandler(this.canvas, callbacks);\r\n        this.scene_manager = new GameSceneManager();\r\n    }\r\n\r\n    /*\r\n     * init: initializes the game loop.\r\n     * No parameters\r\n     */\r\n    public init(): void {\r\n        requestAnimationFrame(this.animate);\r\n    }\r\n\r\n    /*\r\n     * frameRate: sets frame rate.\r\n     * @frame_rate: number, the number of frames per second.\r\n     */\r\n    public frameRate(frame_rate) {\r\n        this.frame_rate = frame_rate;\r\n    }\r\n\r\n    /*\r\n     * inputHandler: returns the current input handler.\r\n     */\r\n    public inputHandler(): InputHandler {\r\n        return this.input_handler;\r\n    }\r\n\r\n    /*\r\n     * Input Handler functions:\r\n     */\r\n\r\n    public isKeyDown(key: KEYCODE): boolean {\r\n        return this.input_handler.isKeyDown(key);\r\n    }\r\n\r\n    public mousePos(): Vector2D {\r\n        return this.input_handler.mousePos();\r\n    }\r\n\r\n    public isMouseButtonDown(button: number): boolean {\r\n        return this.input_handler.isMouseButtonDown(button);\r\n    }\r\n\r\n    /*\r\n     * Game Scene Manager functions:\r\n     */\r\n\r\n    public pushScene(scene: GameScene): void {\r\n        this.scene_manager.pushScene(scene);\r\n    }\r\n\r\n    public changeScene(scene: GameScene): void {\r\n        this.scene_manager.changeScene(scene);\r\n    }\r\n\r\n    public popScene(): void {\r\n        this.scene_manager.popScene();\r\n    }\r\n\r\n    private frame_rate: number;\r\n    private frame_counter: number;\r\n    private last_time: number;\r\n    private input_handler: InputHandler;\r\n    private scene_manager: GameSceneManager;\r\n\r\n    /*\r\n     * Game Loop\r\n     */\r\n    private animate = (): void => {\r\n        let time = new Date();\r\n        let elapse = time.getTime() - this.last_time;\r\n        let interval = SECOND / this.frame_rate;\r\n        if (elapse > interval) {\r\n            this.scene_manager.update();\r\n            this.scene_manager.render();\r\n            this.last_time = time.getTime() - (elapse % interval);\r\n        }\r\n        requestAnimationFrame(this.animate);\r\n    };\r\n\r\n    /*\r\n     * The following are input handler callbacks\r\n     */\r\n\r\n    private onKeyDown = (key: KEYCODE): void => {\r\n        this.scene_manager.onKeyDown(key);\r\n    };\r\n\r\n    private onKeyUp = (key: KEYCODE): void => {\r\n        this.scene_manager.onKeyUp(key);\r\n    };\r\n\r\n    private onMouseMove = (pos: Vector2D): void => {\r\n        this.scene_manager.onMouseMove(pos);\r\n    };\r\n\r\n    private onMouseDown = (button: number, pos: Vector2D): void => {\r\n        this.scene_manager.onMouseDown(button, pos);\r\n    };\r\n\r\n    private onMouseUp = (button: number, pos: Vector2D): void => {\r\n        this.scene_manager.onMouseUp(button, pos);\r\n    };\r\n}\r\n\r\nexport {Game};","/*\r\n Dependencies:\r\n */\r\nimport {Vector2D} from \"./Vector2D\";\r\nimport {Drawing} from \"./Drawing\";\r\n\r\nabstract class AnyGameObject {\r\n    public constructor(public position: Vector2D) {}\r\n}\r\n\r\nclass RectangularGameObject extends AnyGameObject {\r\n    public constructor(public position: Vector2D, public width: number, public height: number) {\r\n        super(position);\r\n    }\r\n}\r\n\r\nclass CircularGameObject extends AnyGameObject {\r\n    public constructor(public position: Vector2D, public radius: number) {\r\n        super(position);\r\n    }\r\n}\r\n\r\nclass PolyGameObject extends AnyGameObject {\r\n    constructor(public initial_point: Vector2D, public end_points: Vector2D[]) {\r\n        super(initial_point);\r\n        end_points.unshift(initial_point);\r\n    }\r\n}\r\n\r\nclass GameObject {\r\n    /*\r\n     * constructor: constructs the game object\r\n     * @id: string, a game object id.\r\n     * @drawing: Drawing, the drawing associated with the object.\r\n     */\r\n    public constructor(public drawing: Drawing) {}\r\n\r\n    /*\r\n     * update: updates the object\r\n     * no parameters\r\n     */\r\n    public update(): void {\r\n\r\n    }\r\n\r\n    /*\r\n     * render: renders the object\r\n     * no parameters\r\n     */\r\n    public render(): void {\r\n        this.drawing.draw();\r\n    }\r\n\r\n    /*\r\n     * cooInObject: returns true if a coordinate is in an object.\r\n     * @coo\r\n     */\r\n    public cooInObject(coo: Vector2D): boolean {\r\n        let x = this.drawing.object.position.x;\r\n        let y = this.drawing.object.position.y;\r\n        if ((<RectangularGameObject>this.drawing.object).width) {\r\n            return (coo.x >= x &&\r\n            coo.x <= x + (<RectangularGameObject>this.drawing.object).width &&\r\n            coo.y >= y &&\r\n            coo.y <= y + (<RectangularGameObject>this.drawing.object).height);\r\n        }\r\n        else if ((<CircularGameObject>this.drawing.object).radius) {\r\n            return (Math.pow((<CircularGameObject>this.drawing.object).radius,2) <= Math.pow(coo.x - x,2) + Math.pow(coo.y - y,2));\r\n        }\r\n        else if ((<PolyGameObject>this.drawing.object).end_points.length) {\r\n            x = coo.x;\r\n            y = coo.y;\r\n            let inside = false;\r\n            for (let i = 0, j = (<PolyGameObject>this.drawing.object).end_points.length - 1; i < (<PolyGameObject>this.drawing.object).end_points.length; j = i++) {\r\n                let xi = (<PolyGameObject>this.drawing.object).end_points[i].x;\r\n                let yi = (<PolyGameObject>this.drawing.object).end_points[i].y;\r\n                let xj = (<PolyGameObject>this.drawing.object).end_points[j].x;\r\n                let yj = (<PolyGameObject>this.drawing.object).end_points[j].y;\r\n                let intersect = ((yi > y) != (yj > y))\r\n                    && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\r\n                if (intersect) inside = !inside;\r\n            }\r\n            return inside;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport {AnyGameObject, RectangularGameObject, CircularGameObject, PolyGameObject, GameObject};","/*\r\n Dependencies:\r\n */\r\nimport {GameObject} from \"./GameObject\";\r\nimport {Vector2D} from \"./Vector2D\";\r\n\r\nclass GameScene {\r\n    public objects: GameObject[] = [];\r\n\r\n    public constructor(public id: string) {}\r\n\r\n    /*\r\n     * update: updates the scene.\r\n     * no parameters\r\n     */\r\n    public update(): void {\r\n        for (let object of this.objects) {\r\n            object.update();\r\n        }\r\n    }\r\n\r\n    /*\r\n     * render: renders the scene.\r\n     * no parameters\r\n     */\r\n    public render(): void {\r\n        for (let object of this.objects) {\r\n            object.render();\r\n        }\r\n    }\r\n\r\n    /*\r\n     * onEnter: returns true if entering the scene was successful, false otherwise\r\n     * no parameters\r\n     */\r\n    public onEnter(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /*\r\n     * Input Handler functions:\r\n     */\r\n\r\n    public onKeyDown(key: number): void {}\r\n\r\n    public onKeyUp(key: number): void {}\r\n\r\n    public onMouseMove(pos: Vector2D): void {}\r\n\r\n    public onMouseDown(button: number, pos: Vector2D): void {}\r\n\r\n    public onMouseUp(button: number, pos: Vector2D): void {}\r\n\r\n    /*\r\n     * onExit: returns true if exiting the scene was successful, false otherwise\r\n     * no parameters\r\n     */\r\n    public onExit(): boolean {\r\n        return true;\r\n    }\r\n}\r\n\r\nexport {GameScene};\r\n","/*\r\n Dependencies:\r\n */\r\nimport {GameScene} from \"./GameScene\";\r\nimport {KEYCODE} from \"./KeyCode\";\r\nimport {Vector2D} from \"./Vector2D\";\r\n\r\nclass GameSceneManager {\r\n    public constructor() {}\r\n\r\n    /*\r\n     * pushScene: adds a scene and makes it the current scene of the game.\r\n     * @scene: GameScene, the scene you want to add to your game.\r\n     */\r\n    public pushScene(scene: GameScene): void {\r\n        this.scenes.push(scene);\r\n    }\r\n\r\n    /*\r\n     * changeScene: replaces the current scene with the specified scene.\r\n     * @scene: GameScene, the scene you want to put in place of the current scene.\r\n     */\r\n    public changeScene(scene: GameScene): void {\r\n        if (this.scenes.length) {\r\n            if (this.scenes[this.scenes.length - 1].id != scene.id) {\r\n                this.scenes.push(scene);\r\n                if (this.scenes[this.scenes.length - 1].onExit()) {\r\n                    this.scenes.splice(this.scenes.length - 2, 1);\r\n                }\r\n                else {\r\n                    console.log(\"Error exiting scene \" + this.scenes[this.scenes.length - 1].id);\r\n                }\r\n                if (!this.scenes[this.scenes.length - 1].onEnter()) {\r\n                    console.log(\"Error while changing scene\");\r\n                }\r\n            }\r\n            else {\r\n                console.log(\"Cannot change to the same scene\");\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"Cannot change scene when there are no current scenes\");\r\n        }\r\n    }\r\n\r\n    /*\r\n     * popScene: removes the current scene and makes the previous scene the current scene.\r\n     * no parameters\r\n     */\r\n    public popScene(): void {\r\n        if (this.scenes.length > 1) {\r\n            if (this.scenes[this.scenes.length - 1].onExit()) {\r\n                this.scenes.pop();\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n     * currentScene: returns the current game scene.\r\n     * no parameters\r\n     */\r\n    public currentScene(): GameScene {\r\n        return this.scenes[this.scenes.length - 1];\r\n    }\r\n\r\n    /*\r\n     * update: updates the current scene.\r\n     * no parameters\r\n     */\r\n    public update(): void {\r\n        this.currentScene().update();\r\n    }\r\n\r\n    /*\r\n     * render: renders the current scene.\r\n     * no parameters\r\n     */\r\n    public render(): void {\r\n        this.currentScene().render();\r\n    }\r\n\r\n    private scenes: GameScene[] = [];\r\n\r\n    /*\r\n     * Input Handler functions:\r\n     */\r\n\r\n    public onKeyDown(key: KEYCODE): void {\r\n        this.currentScene().onKeyDown(key);\r\n    }\r\n\r\n    public onKeyUp(key: KEYCODE): void {\r\n        this.currentScene().onKeyUp(key);\r\n    }\r\n\r\n    public onMouseMove(pos: Vector2D): void {\r\n        this.currentScene().onMouseMove(pos);\r\n    }\r\n\r\n    public onMouseDown(button: number, pos: Vector2D): void {\r\n        this.currentScene().onMouseDown(button, pos);\r\n    }\r\n\r\n    public onMouseUp(button: number, pos: Vector2D): void {\r\n        this.currentScene().onMouseUp(button, pos);\r\n    }\r\n}\r\n\r\nexport {GameSceneManager};","/*\r\n Dependencies:\r\n */\r\nimport {Vector2D} from \"./Vector2D\";\r\nimport {KEYCODE} from \"./KeyCode\";\r\n\r\nclass InputHandler {\r\n    /*\r\n     Public:\r\n    */\r\n\r\n    /*\r\n     * constructor: constructs the input handler instance\r\n     * @canvas: HTMLCanvasElement, the canvas element that you wish your game to be drawn on.\r\n     * @callbacks: Callback Functions array, array of callbacks for events.\r\n     *             Current callbacks:\r\n     *             \"onKeyDown\"   : emitted when a key is pressed\r\n     *             \"onKeyUp\"     : emitted when a key is released\r\n     *             \"onMouseMove\" : emitted when the mouse is moved\r\n     *             \"onMouseDown\" : emitted when a mouse button is pressed\r\n     *             \"onMouseUp\"   : emitted when a mouse button is released\r\n     */\r\n    public constructor(private canvas: HTMLCanvasElement, private callbacks: any) {\r\n        //Adding event listeners for canvas\r\n        canvas.tabIndex = 0;\r\n        canvas.addEventListener(\"keydown\",this.onKeyDown,false);\r\n        canvas.addEventListener(\"keyup\",this.onKeyUp,false);\r\n        canvas.addEventListener(\"mousemove\",this.onMouseMove,false);\r\n        canvas.addEventListener(\"mousedown\",this.onMouseDown,false);\r\n        canvas.addEventListener(\"mouseup\",this.onMouseUp,false);\r\n        canvas.onclick = function (ev: MouseEvent) { return false; };\r\n        canvas.oncontextmenu = function (ev: PointerEvent){ return false; };\r\n        canvas.onwheel = function (ev: WheelEvent) { return false; };\r\n        canvas.focus();\r\n\r\n        //populating arrays\r\n        for (let key in KEYCODE) {\r\n            let int = parseInt(key,10);\r\n            if (!isNaN(int)) {\r\n                this.keys[int] = false;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            this.mouse_buttons[i] = false;\r\n        }\r\n\r\n        this.mouse_pos = new Vector2D(0,0);\r\n    }\r\n\r\n    /*\r\n     * isKeyDown: returns true if a \"key\" (KEYCODE) has been pressed, returns false otherwise\r\n     * @key: KEYCODE, the key you wish to know if the key is down.\r\n     */\r\n    public isKeyDown(key: KEYCODE): boolean {\r\n        if (this.keys[key]) {\r\n            return this.keys[key];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     * mousePos: returns a Vector2D with the mouse position\r\n     * no parameters\r\n     */\r\n    mousePos(): Vector2D {\r\n        return this.mouse_pos;\r\n    }\r\n\r\n    /*\r\n     * isMouseButtonDown: returns true if a mouse button is pressed, false otherwise\r\n     * @button: number, the mouse button you want to check\r\n     *          Currently it can store up to 10 mouse buttons.\r\n     *          0 is usually the left button\r\n     *          1 is usually the mid button\r\n     *          2 is usaully the right button\r\n     */\r\n    isMouseButtonDown(button: number): boolean {\r\n        if (this.mouse_buttons[button]) {\r\n            return this.mouse_buttons[button];\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /*\r\n     Private:\r\n     */\r\n\r\n    private keys: boolean[] = [];\r\n    private mouse_buttons: boolean[] = [];\r\n    private mouse_pos: Vector2D;\r\n\r\n    //functions:\r\n\r\n    /*\r\n     * The following are function callbacks for events\r\n     */\r\n\r\n    private onKeyDown = (ev: KeyboardEvent): void => {\r\n        ev.preventDefault();\r\n        this.keys[ev.keyCode] = true;\r\n        if (this.callbacks[\"onKeyDown\"]) {\r\n            this.callbacks[\"onKeyDown\"](ev.keyCode);\r\n        }\r\n    };\r\n\r\n    private onKeyUp = (ev: KeyboardEvent): void => {\r\n        this.keys[ev.keyCode] = false;\r\n        if (this.callbacks['onKeyUp']) {\r\n            this.callbacks['onKeyUp'](ev.keyCode);\r\n        }\r\n    };\r\n\r\n    private onMouseMove = (ev: MouseEvent): void => {\r\n        let x: number = ev.pageX;\r\n        let y: number = ev.pageY;\r\n        x -= this.canvas.offsetLeft;\r\n        y -= this.canvas.offsetTop;\r\n        this.mouse_pos.x = x;\r\n        this.mouse_pos.y = y;\r\n        if (this.callbacks[\"onMouseMove\"]) {\r\n            this.callbacks[\"onMouseMove\"](this.mouse_pos);\r\n        }\r\n    };\r\n\r\n    private onMouseDown = (ev: MouseEvent): void => {\r\n        this.mouse_buttons[ev.button] = true;\r\n        if (this.callbacks[\"onMouseDown\"]) {\r\n            this.callbacks[\"onMouseDown\"](ev.button,this.mouse_pos);\r\n        }\r\n    };\r\n\r\n    private onMouseUp = (ev: MouseEvent): void => {\r\n        this.mouse_buttons[ev.button] = false;\r\n        if (this.callbacks[\"onMouseUp\"]) {\r\n            this.callbacks[\"onMouseUp\"](ev.button,this.mouse_pos);\r\n        }\r\n    };\r\n}\r\n\r\nexport {InputHandler};","enum KEYCODE {\r\n    BACKSPACE = 8,\r\n    TAB = 9,\r\n    ENTER = 13,\r\n    SHIFT = 16,\r\n    CTRL = 17,\r\n    ALT = 18,\r\n    PAUSE = 19,\r\n    CAPS_LOCK = 20,\r\n    ESCAPE = 27,\r\n    SPACE = 32,\r\n    PAGE_UP = 33,\r\n    PAGE_DOWN = 34,\r\n    END = 35,\r\n    HOME = 36,\r\n    LEFT_ARROW = 37,\r\n    UP_ARROW = 38,\r\n    RIGHT_ARROW = 39,\r\n    DOWN_ARROW = 40,\r\n    INSERT = 45,\r\n    DELETE = 46,\r\n    KEY_0 = 48,\r\n    KEY_1 = 49,\r\n    KEY_2 = 50,\r\n    KEY_3 = 51,\r\n    KEY_4 = 52,\r\n    KEY_5 = 53,\r\n    KEY_6 = 54,\r\n    KEY_7 = 55,\r\n    KEY_8 = 56,\r\n    KEY_9 = 57,\r\n    KEY_A = 65,\r\n    KEY_B = 66,\r\n    KEY_C = 67,\r\n    KEY_D = 68,\r\n    KEY_E = 69,\r\n    KEY_F = 70,\r\n    KEY_G = 71,\r\n    KEY_H = 72,\r\n    KEY_I = 73,\r\n    KEY_J = 74,\r\n    KEY_K = 75,\r\n    KEY_L = 76,\r\n    KEY_M = 77,\r\n    KEY_N = 78,\r\n    KEY_O = 79,\r\n    KEY_P = 80,\r\n    KEY_Q = 81,\r\n    KEY_R = 82,\r\n    KEY_S = 83,\r\n    KEY_T = 84,\r\n    KEY_U = 85,\r\n    KEY_V = 86,\r\n    KEY_W = 87,\r\n    KEY_X = 88,\r\n    KEY_Y = 89,\r\n    KEY_Z = 90,\r\n    LEFT_META = 91,\r\n    RIGHT_META = 92,\r\n    SELECT = 93,\r\n    NUMPAD_0 = 96,\r\n    NUMPAD_1 = 97,\r\n    NUMPAD_2 = 98,\r\n    NUMPAD_3 = 99,\r\n    NUMPAD_4 = 100,\r\n    NUMPAD_5 = 101,\r\n    NUMPAD_6 = 102,\r\n    NUMPAD_7 = 103,\r\n    NUMPAD_8 = 104,\r\n    NUMPAD_9 = 105,\r\n    MULTIPLY = 106,\r\n    ADD = 107,\r\n    SUBTRACT = 109,\r\n    DECIMAL = 110,\r\n    DIVIDE = 111,\r\n    F1 = 112,\r\n    F2 = 113,\r\n    F3 = 114,\r\n    F4 = 115,\r\n    F5 = 116,\r\n    F6 = 117,\r\n    F7 = 118,\r\n    F8 = 119,\r\n    F9 = 120,\r\n    F10 = 121,\r\n    F11 = 122,\r\n    F12 = 123,\r\n    NUM_LOCK = 144,\r\n    SCROLL_LOCK = 145,\r\n    SEMICOLON = 186,\r\n    EQUALS = 187,\r\n    COMMA = 188,\r\n    DASH = 189,\r\n    PERIOD = 190,\r\n    FORWARD_SLASH = 191,\r\n    GRAVE_ACCENT = 192,\r\n    OPEN_BRACKET = 219,\r\n    BACK_SLASH = 220,\r\n    CLOSE_BRACKET = 221,\r\n    SINGLE_QUOTE = 222\r\n}\r\n\r\nexport {KEYCODE}","class Vector2D {\r\n    /*\r\n     * constructor: constructs the vector instance\r\n     * @x: number, the x coordinate of your vector\r\n     * @y: number, the y coordinate of your vector\r\n     */\r\n    public constructor(public x: number, public y: number) {}\r\n\r\n    /*\r\n     * isEqual: returns true if both components of the vector match\r\n     * @vector: the vector you want to compare te current vector with.\r\n     */\r\n    public isEqual(vector: Vector2D): boolean {\r\n        return (this.x == vector.x && this.y == vector.y);\r\n    }\r\n\r\n    /*\r\n     * length: returns the length of the vector\r\n     * no parameters\r\n     */\r\n    public length(): number {\r\n        return Math.sqrt(Math.pow(this.x,2) + Math.pow(this.y,2));\r\n    }\r\n\r\n    /*\r\n     * copy: copies a vector\r\n     * @vector: Vector2D, the vector you wish the current vector to equal to.\r\n     */\r\n    public copy(vector: Vector2D): void {\r\n        this.x = vector.x;\r\n        this.y = vector.y;\r\n    }\r\n\r\n    /*\r\n     * add: adds a vector to your current vector.\r\n     * @vector: Vector2D, the vector you want to add to your current vector.\r\n     */\r\n    public add(vector: Vector2D): void {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n    }\r\n\r\n    /*\r\n     * subtract: subtracts a vector to your current vector.\r\n     * @vector: Vector2D, the vector you want to subtract to your current vector.\r\n     */\r\n    public subtract(vector: Vector2D): void {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n    }\r\n\r\n    /*\r\n     * multiply: multiplies your current vector with a scalar.\r\n     * @scalar: number, the scalar you want your current vector to be multiplied by.\r\n     */\r\n    public multiply(scalar: number): void {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n    }\r\n\r\n    /*\r\n     * divide: divides your current vector by a scalar.\r\n     * @scalar: number, the scalar you want your current vector to be divided by.\r\n     */\r\n    public divide(scalar: number): void {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n    }\r\n\r\n    /*\r\n     * normalize: normalizes your current vector, sets your vector to a unit vector.\r\n     * no parameters\r\n     */\r\n    public normalize(): void {\r\n        let l = this.length();\r\n        if (l > 0) {\r\n            this.divide(l);\r\n        }\r\n    }\r\n}\r\n\r\nexport {Vector2D};","import {Game} from \"./framework/Game\";\r\nimport {TestScene} from \"./test/TestScene\";\r\n\r\nwindow.onload = function () {\r\n    let canvas: HTMLCanvasElement = <HTMLCanvasElement>document.getElementById('game'); //gets canvas element\r\n    let game = new Game(\"Snake\", canvas); //creates a game instance\r\n    game.pushScene(new TestScene(game)); //adds the initial scene\r\n    game.init(); //initializes the game\r\n};","import {GameScene} from \"../framework/GameScene\";\r\nimport {Game} from \"../framework/Game\";\r\nimport {RectangularGameObject, GameObject} from \"../framework/GameObject\";\r\nimport {Vector2D} from \"../framework/Vector2D\";\r\nimport {RectangleDrawing, TextDrawing} from \"../framework/Drawing\";\r\n\r\nclass TestScene extends GameScene {\r\n    public constructor(private game: Game) {\r\n        super(\"test\");\r\n        let canvas_context = game.canvas.getContext(\"2d\");\r\n        let bg_rect = new RectangularGameObject(new Vector2D(0,0), game.canvas.width, game.canvas.height);\r\n        let bg = new RectangleDrawing(bg_rect, \"black\", true, canvas_context);\r\n        let title = new TextDrawing(new Vector2D(game.canvas.width / 2, game.canvas.height / 2), 30, \"impact\", \"white\", \"eSe Game Framework\", true, true, canvas_context);\r\n        this.objects.push(new GameObject(bg));\r\n        this.objects.push(new GameObject(title));\r\n    }\r\n}\r\n\r\nexport {TestScene};"]}